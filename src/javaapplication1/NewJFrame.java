/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication1;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Random;
import javax.swing.ButtonGroup;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.Timer;
/**
 *
 * @author jyoti
 */
public class NewJFrame extends javax.swing.JFrame {
    String question_code;
    int correct_answer;
    int current_level = 1;
    int score = 0;
    int no_of_attempted = 0;
   
   
    String current_regid;
    int max_limit1;
    int max_limit2;
    int max_limit3;
    int max_limit4;
    int max_limit5;
    int max_limit6;
    int max_limit7;
    int max_limit8;
    int max_limit9;
    int max_limit10;
    int[] arr1, arr2, arr3, arr4, arr5;
    int [] arr6, arr7, arr8, arr9, arr10;
    
    Random Rno  = new Random();
    ButtonGroup group = new ButtonGroup();
    public static Connection Conn1;
    public static Statement stmt1,stmt2;
    public static int time_remaining = 20*60000;
    
    
    /**
     * Creates new form NewJFrame
     */
    
    
    
    public NewJFrame() {
        initComponents();
        
        //jInternalFrame1.getContentPane().setBackground(Color.CYAN);
        this.setTitle("CAT | Test");
        this.setLocationRelativeTo(null);
        TimerThread();
        //timer_tick();
       jTextArea1.setEditable(false);
       label_level.setText(Integer.toString(current_level));
       label_ques_attempted.setText(Integer.toString(no_of_attempted));
       label_score.setText(Integer.toString(score));
       String user = "root";
       String pw = "vaibhav";
       try{
           Class.forName("com.mysql.jdbc.Driver").newInstance();
         }catch(ClassNotFoundException |InstantiationException |IllegalAccessException q)
        {
            ;
        } 
        try{
        String url = "jdbc:mysql://localhost:3306/cat?zeroDateTimeBehavior=convertToNull";
        Conn1 = DriverManager.getConnection( url, user, pw );
        Conn1.setAutoCommit(true);
        this.stmt1  = Conn1.createStatement();
        }
        catch(SQLException sqle)
    {
         //  System.out.println("SqlException:" + sqle);
    }
        
        //getquestion();
        
        group.add(opt1_rb);
        group.add(opt2_rb);
        group.add(opt3_rb);
        group.add(opt4_rb);
        
        max_limit1 = get_max_limit(1);
        max_limit2 = get_max_limit(2);
        max_limit3 = get_max_limit(3);
        max_limit4 = get_max_limit(4);
        max_limit5 = get_max_limit(5);
        max_limit6 = get_max_limit(6);
        max_limit7 = get_max_limit(7);
        max_limit8 = get_max_limit(8);
        max_limit9 = get_max_limit(9);
        max_limit10 = get_max_limit(10);
//        System.out.println(max_limit1);
//        System.out.println(max_limit5);
//        System.out.println(max_limit10);
        int i;
        arr1 = new int[max_limit1];
        arr2 = new int[max_limit2];
        arr3 = new int[max_limit3];
        arr4 = new int[max_limit4];
        arr5 = new int[max_limit5];
        arr6 = new int[max_limit6];
        arr7 = new int[max_limit7];
        arr8 = new int[max_limit8];
        arr9 = new int[max_limit9];
        arr10 = new int[max_limit10];
        
      
//        if(opt1_rb.isSelected() || opt2_rb.isSelected()  || opt3_rb.isSelected() || opt4_rb.isSelected())
//        {
//            next.setEnabled(true);
//        }
//        else{
//            next.setEnabled(false);
//        }
         
//        if
//        next.setEnabled(true);
//        }
//        else{
//        next.setEnabled(false);
//        }
        getquestion();

    }
   public void Fetch_regid(String s){
       current_regid = s;
       //System.out.println("In fetch:" + current_regid);
   
   }
    
    public int get_max_limit(int i)
    {
        int max = 0;
        String get_lim = "select count(*) from level" + Integer.toString(i);
        try{
        ResultSet count = this.stmt1.executeQuery(get_lim);
        while(count.next())
        {
            max = count.getInt(1);
        }
        }catch(SQLException e)
        {
            ;
        }
        return max;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        opt1_rb = new javax.swing.JRadioButton();
        opt4_rb = new javax.swing.JRadioButton();
        opt3_rb = new javax.swing.JRadioButton();
        opt2_rb = new javax.swing.JRadioButton();
        next = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        label_timer = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        label_level = new javax.swing.JLabel();
        label_ques_attempted = new javax.swing.JLabel();
        label_score = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jInternalFrame1.setBorder(null);
        jInternalFrame1.setVisible(true);

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextArea1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTextArea1PropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        opt1_rb.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        opt1_rb.setText("jRadioButton1");
        opt1_rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opt1_rbActionPerformed(evt);
            }
        });

        opt4_rb.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        opt4_rb.setText("jRadioButton4");
        opt4_rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opt4_rbActionPerformed(evt);
            }
        });

        opt3_rb.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        opt3_rb.setText("jRadioButton3");
        opt3_rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opt3_rbActionPerformed(evt);
            }
        });

        opt2_rb.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        opt2_rb.setText("jRadioButton2");
        opt2_rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opt2_rbActionPerformed(evt);
            }
        });

        next.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        next.setText("Next");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jLabel1.setText("Question:");

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jLabel2.setText("Options:");

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel3.setText("Time Remaining : ");

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jLabel4.setText("Current Level ");

        label_timer.setFont(new java.awt.Font("Felix Titling", 1, 24)); // NOI18N
        label_timer.setForeground(new java.awt.Color(51, 51, 51));
        label_timer.setText("20 : 00");

        jLabel8.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jLabel8.setText("Total Attempted");

        jLabel9.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jLabel9.setText("Score");

        jLabel10.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jLabel10.setText(":");

        jLabel11.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jLabel11.setText(":");

        jLabel12.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jLabel12.setText(":");

        label_level.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        label_level.setText("5");

        label_ques_attempted.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        label_ques_attempted.setText("0");

        label_score.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        label_score.setText("0");

        jLabel5.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 255));
        jLabel5.setText("Quit the test");
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGap(256, 256, 256)
                .addComponent(next, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(22, 22, 22))
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel2))
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label_timer))
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(label_ques_attempted))
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel9))
                                .addGap(18, 18, 18)
                                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(label_level))
                                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(label_score))))))
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(opt1_rb, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(opt2_rb, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(opt3_rb, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(opt4_rb, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel1))
                    .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(label_timer)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel10)
                            .addComponent(label_level))
                        .addGap(18, 18, 18)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11)
                            .addComponent(label_ques_attempted))
                        .addGap(18, 18, 18)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel12)
                            .addComponent(label_score)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(opt1_rb)
                        .addGap(29, 29, 29)
                        .addComponent(opt2_rb)
                        .addGap(28, 28, 28)
                        .addComponent(opt3_rb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addComponent(opt4_rb)
                        .addGap(47, 47, 47)
                        .addComponent(next)
                        .addGap(24, 24, 24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextArea1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTextArea1PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextArea1PropertyChange

    private void opt1_rbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opt1_rbActionPerformed
        if(opt1_rb.isSelected()){
            next.setEnabled(true);
        }
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_opt1_rbActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        int answered,org_ans;
       
        no_of_attempted++;
        
        String answered_query = "update level" + Integer.toString(current_level) +
                " set answered_correctly=answered_correctly+1,"
                + " no_of_attempts=no_of_attempts+1 where qcode=" + question_code ;
        String unanswered_query = "update level" + Integer.toString(current_level) +
                " set  no_of_attempts=no_of_attempts+1 where qcode=" + question_code ;
        
        String trecord_correct = "update test_record set total_attempted = total_attempted + 1,"
                + " answered_correctly = answered_correctly + 1 where level=" + Integer.toString(current_level);
        String trecord_incorrect = "update test_record set total_attempted = total_attempted + 1 where level = " 
                + Integer.toString(current_level);
        
        
        if(opt1_rb.isSelected())
        {
            answered = 1;
        }
        else if(opt2_rb.isSelected())
        {
            answered = 2;
        }
        else  if(opt3_rb.isSelected())
        {
            answered = 3;
        }
         else {
            answered = 4;
        }
         
        if(answered == correct_answer){
       //  System.out.println("correct answer  ="+current_level);
         
         score = score + current_level;
         try{
            this.stmt1 = NewJFrame.Conn1.createStatement();
           this.stmt2 = NewJFrame.Conn1.createStatement();
            stmt1.executeUpdate(answered_query);

            stmt2.executeUpdate(trecord_correct);
         }catch(SQLException w){
             ;
         }
         
         
         
         if(current_level != 10){
            current_level++;
         }
         }
        
         else{
         //  System.out.println("wrong answer  ="+current_level);
            try{
             this.stmt1 = NewJFrame.Conn1.createStatement();
             
             this.stmt2 = NewJFrame.Conn1.createStatement();
             stmt1.executeUpdate(unanswered_query);
           stmt2.executeUpdate(trecord_incorrect);
         }catch(SQLException x){;}
             
             
             
             if(current_level != 1){
                current_level--;
             }
        }
    
       getquestion();    
       label_level.setText(Integer.toString(current_level));
       label_ques_attempted.setText(Integer.toString(no_of_attempted));
       label_score.setText(Integer.toString(score));
        // TODO add your handling code here:
    }//GEN-LAST:event_nextActionPerformed

    private void opt2_rbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opt2_rbActionPerformed
        if(opt2_rb.isSelected()){
        next.setEnabled(true);
        }
    }//GEN-LAST:event_opt2_rbActionPerformed

    private void opt3_rbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opt3_rbActionPerformed
        if(opt3_rb.isSelected()){
        next.setEnabled(true);
        }
        
    }//GEN-LAST:event_opt3_rbActionPerformed

    private void opt4_rbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opt4_rbActionPerformed
    if(opt4_rb.isSelected()){
        next.setEnabled(true);
        }
        
    }//GEN-LAST:event_opt4_rbActionPerformed

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        this.dispose();
        
        afterTest();        // TODO add your handling code here:
        
        
        
        //call the function which will be called by default when the test is over!
    }//GEN-LAST:event_jLabel5MouseClicked

    public int get_random_number(int level)
    {
        int no = 0;
        int flag = 0;
        switch (level) {
            case 1:
               while(flag == 0)
               {
                    no =  Rno.nextInt(max_limit1) + 1;
                    if (arr1[no - 1] == 1) ;
                    else{
                        flag = 1;
                        arr1[no - 1] = 1;
                    }
               }
               break;
            case 2:
               while(flag == 0)
               {
                    no =  Rno.nextInt(max_limit2) + 1;
                    if (arr2[no - 1] == 1) ;
                    else{
                        flag = 1;
                        arr2[no - 1] = 1;
                    }
               }
                break;
            case 3:
                while(flag == 0)
               {
                    no =  Rno.nextInt(max_limit3) + 1;
                    if (arr3[no - 1] == 1) ;
                    else{
                        flag = 1;
                        arr3[no - 1] = 1;
                    }
               }
                break;
            case 4:
                while(flag == 0)
               {
                    no =  Rno.nextInt(max_limit4) + 1;
                    if (arr4[no - 1] == 1) ;
                    else{
                        flag = 1;
                        arr4[no - 1] = 1;
                    }
               }
                break;
            case 5:
                while(flag == 0)
               {
                    no =  Rno.nextInt(max_limit5) + 1;
                    if (arr5[no - 1] == 1) ;
                    else{
                        flag = 1;
                        arr5[no - 1] = 1;
                    }
               }
                break;
            case 6:
                while(flag == 0)
               {
                    no =  Rno.nextInt(max_limit6) + 1;
                    if (arr6[no - 1] == 1) ;
                    else{
                        flag = 1;
                        arr6[no - 1] = 1;
                    }
               }
                break;
            case 7:
                while(flag == 0)
               {
                    no =  Rno.nextInt(max_limit7) + 1;
                    if (arr7[no - 1] == 1) ;
                    else{
                        flag = 1;
                        arr7[no - 1] = 1;
                    }
               }
                break;
            case 8:
                while(flag == 0)
               {
                    no =  Rno.nextInt(max_limit8) + 1;
                    if (arr8[no - 1] == 1) ;
                    else{
                        flag = 1;
                        arr8[no - 1] = 1;
                    }
               }
                break;
            case 9:
                while(flag == 0)
               {
                    no =  Rno.nextInt(max_limit9) + 1;
                    if (arr9[no - 1] == 1) ;
                    else{
                        flag = 1;
                        arr9[no - 1] = 1;
                    }
               }
                break;
            case 10:
                while(flag == 0)
               {
                    no =  Rno.nextInt(max_limit10) + 1;
                    if (arr10[no - 1] == 1) ;
                    else{
                        flag = 1;
                        arr10[no - 1] = 1;
                    }
               }
                break;
            default:
                throw new AssertionError();
        }
        return no;
    }
   
    
    public void getquestion(){
      
        group.clearSelection();  
        next.setEnabled(false);
        //int x = Rno.nextInt(10)+1;
            
        int number = get_random_number(current_level);
      //  System.out.println(number);
        String ques_query = "select qcode, question,option1,option2,option3,option4,correct_option from level"
                 + Integer.toString(current_level) + " limit 1 offset " 
                + Integer.toString(number - 1);
        try
        {
                this.stmt1  = NewJFrame.Conn1.createStatement();
                ResultSet result =  this.stmt1.executeQuery(ques_query);
                    while(result.next()){
                this.question_code = result.getString(1);        
                jTextArea1.setText(result.getString(2)) ;
                opt1_rb.setText(result.getString(3));
                opt2_rb.setText(result.getString(4));
                opt3_rb.setText(result.getString(5)); 
                opt4_rb.setText(result.getString(6));
                correct_answer = result.getInt(7);
                   }
        
        }catch(SQLException s){
            ;
        }
        }  
        
        
        //String query = "select count(*) from Level1";
        
        
        
      
 
        
        
        
        //try{  this.stmt1  = NewJFrame.Conn1.createStatement();
        

//        while(result.next()){
//            int max_limit = result.getInt(1);
//            System.out.println(max_limit);
//        }
//        ResultSet ques = this.stmt1.executeQuery(Ques_query);
//        
//        }catch(SQLException sqle )
//    {
//           System.out.println("SqlException:" + sqle);
//    }

    public void TimerThread() {
    try {
      Runnable r=new Runnable() {
          @Override
        public void run() {
          startTimer();
    }
      };
    Thread Timer=new Thread(r,"Timer Thread");
    Timer.start();
    } catch(Exception exc) {
      JOptionPane.showMessageDialog(null,exc);
    }
  }

  public void startTimer() {
     // System.out.println("In start timer.");
      int i = new Integer(10);
       label_timer.setText(Integer.toString(i));
    try {
        
      for(i=2*60;i>=0;i--){
      if (i % 60 < 10){
          label_timer.setText(Integer.toString(i/60) +" : 0" + Integer.toString(i%60));
      }  
      else{
        label_timer.setText(Integer.toString(i/60) +" : " + Integer.toString(i%60));
      }
        Thread.sleep(1000);
    }
      JOptionPane.showMessageDialog(null, "Time Up !");
    this.dispose();
    
    
    afterTest();
    } catch(NullPointerException | InterruptedException exc) {
      JOptionPane.showMessageDialog(null,exc);
    }
  }     

    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        
        
        
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
               
            }

            
              //throw new UnsupportedOperationException("Not yet implemented");
            }
        );
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel label_level;
    private javax.swing.JLabel label_ques_attempted;
    private javax.swing.JLabel label_score;
    public javax.swing.JLabel label_timer;
    private javax.swing.JButton next;
    private javax.swing.JRadioButton opt1_rb;
    private javax.swing.JRadioButton opt2_rb;
    private javax.swing.JRadioButton opt3_rb;
    private javax.swing.JRadioButton opt4_rb;
    // End of variables declaration//GEN-END:variables

   
        //throw new UnsupportedOperationException("Not yet implemented");

    private void afterTest() {
        
       int qcode, no_of_attempts, correctans, correctly_answered;
       float zvalue;
       String question, opt1, opt2, opt3, opt4;
       float new_zvalue = 0;
       int new_level;
       
       int i = 1;
       String update_score = "update applicant set score = " + Integer.toString(score) + " where reg_id = " + current_regid;
       try{
           stmt1.executeUpdate(update_score);
       }
       catch(SQLException s){
         ;
       }
       
       
       //here starts the CAT algorithm
        for(i = 1; i <=10; i++)
        {
            String questions_fetcher = "select * from level"+Integer.toString(i)+ " where no_of_attempts = 10";
            //System.out.println(questions_fetcher);
            try
            {
                ResultSet rs = stmt1.executeQuery(questions_fetcher);
                while(rs.next())
                {
                    qcode = rs.getInt(1);
                    question = rs.getString(2);
                    opt1 = rs.getString(3);
                    opt2 = rs.getString(4);
                    opt3 = rs.getString(5);
                    opt4 = rs.getString(6);
                    correctans = rs.getInt(7);
                    no_of_attempts = rs.getInt(8);
                    correctly_answered = rs.getInt(9);
                    zvalue = rs.getFloat(10);
                    
                    new_zvalue = getnew_zvalue(i, zvalue, correctly_answered);
                    
                    //now, get the new level based on the new_zvalue
                    if(new_zvalue == zvalue)
                    {
                        String z_same = "update level"+Integer.toString(i)+" set no_of_attempts = 0, answered_correctly = 0 where qcode = "
                                +Integer.toString(qcode);
                        try{
                        stmt1.executeUpdate(z_same);
                        }
                        catch(SQLException e)
                        {
                            ;
                        }
                    //case 1 : if new is same as previous one, dont do anything just set those two attrs to 0
                    }
                    else
                    {
                        //else zvalue not same
                        new_level = zvaltoLevel(new_zvalue);
                        if (new_level == i)
                        {
                            //if case 2:  but level remains same --> then update zvalue and set those two attrs to 0
                           
                            String level_same = "update level"+Integer.toString(i)+" set no_of_attempts=0, answered_correctly=0, zvalue="
                                    + Float.toString(new_zvalue)+ " where qcode=" + Integer.toString(qcode);
                           try{
                            stmt1.executeUpdate(level_same);
                           }
                           catch(SQLException s)
                           {
                               ;
                           }
                        }
                        else
                        {
                        //else case 3 : levels are not same --> delete entry from leveli having qcode as the one obtained in this loop && insert 
                      //  into new level all the question related details + reset those two attrs to 0 + new_zvaue;
                          String delete_record = "delete from level" + Integer.toString(i)+" where qcode = " + Integer.toString(qcode);
                          String level_diff = "insert into level" + Integer.toString(new_level) + " values (" + Integer.toString(qcode)
                                  +",'"+question+"','"+opt1+"','"+opt2+"','"+opt3+"','"+opt4+"',"+Integer.toString(correctans)
                                  + "," + Integer.toString(0) + "," + Integer.toString(0)+","
                                  + Float.toString(new_zvalue)+")";
                          try{
                              
                             // System.out.println(delete_record);
                             // System.out.println(level_diff);
                              
                              
                              stmt1.executeUpdate(level_diff);
                               stmt1.executeUpdate(delete_record);
                          
                          
                          }
                          catch(SQLException s)
                          {
                             // System.out.println(s);
                          }
                        }
                    
                    
                    //  
                    
                    }
                }
            }
            catch(SQLException s){
                ;
            }
        
        }
        new ScorenStats().setVisible(true);
    }
                                    //7           7.5         9
    private float getnew_zvalue(int level, float zvalue, int correctly_answer) {
        //float new_zval = 0;
        //float level = (float) zvaltoLevel(zvalue);
	float expected = 10 - (float)level;

	if( correctly_answer > expected ){
		zvalue = zvalue - ((float)correctly_answer - expected)/10;
	}

	if( correctly_answer < expected ){
		zvalue = zvalue + (expected - (float)correctly_answer)/10;
	}
	
	if( zvalue <= 1.0 ){
		zvalue = 1;
	}

	if(zvalue >= 11.0 ){
		zvalue = 11;
	}
        return zvalue;
    }

public int zvaltoLevel(float zval){
	int d = (int)zval;
	//System.out.println(d);
	
        return d;
}
}


